(this["webpackJsonpreact-example"]=this["webpackJsonpreact-example"]||[]).push([[0],{243:function(t,e,n){},244:function(t,e,n){},245:function(t,e,n){"use strict";n.r(e);var s=n(1),i=n(3),r=n.n(i),c=n(249),a=n(248),o=n(10),l=n.n(o),d=n(0);var u=function(t){var e=t.code,n=t.children;return Object(d.jsxs)(d.Fragment,{children:[n,Object(d.jsx)("div",{className:"container",children:Object(d.jsx)(l.a,{trigger:Object(d.jsx)("button",{className:"button is-primary is-light is-large is-fullwidth",children:"See Code Example"}),children:Object(d.jsx)("div",{className:"container",children:Object(d.jsx)(c.a,{language:"javascript",style:a.a,children:e})})})})]})};var h=function(){return Object(d.jsx)("div",{id:"component-example-svg",className:"container",children:Object(d.jsx)("section",{className:"hero",children:Object(d.jsxs)("div",{className:"hero-body",children:[Object(d.jsx)("p",{className:"title",children:"MoleculeStructure - A Basic React Component"}),Object(d.jsxs)("p",{className:"subtitle",children:["The examples below will mostly use the React component"," ",Object(d.jsx)("code",{className:"is-family-code",children:"MoleculeStructure"})," to render the examples. You can see the React implementation in the code below."]})]})})})},p=n(4),m=n(15),g=n(16),v=n(18),b=n(17),j=(n(243),function(t){Object(v.a)(n,t);var e=Object(b.a)(n);function n(t){var s;Object(m.a)(this,n),(s=e.call(this,t)).RDKit=window.RDKit,s.MOL_DETAILS=JSON.stringify(Object(p.a)({width:s.props.width,height:s.props.height,bondLineWidth:1,addStereoAnnotation:!0},s.props.extraDetails));var i="string"===typeof s.props.structure?s.props.structure:"",r="string"===typeof s.props.subStructure?s.props.subStructure:"";return s.state={svg:void 0,mol:s.RDKit?s.RDKit.get_mol(i):"",qmol:s.RDKit?s.RDKit.get_qmol(r):"",rdKitLoaded:!!s.RDKit,rdKitError:!1},s}return Object(g.a)(n,[{key:"draw",value:function(){var t=this.isValidMol();if(t&&this.props.svgMode){var e=this.state.mol.get_svg_with_highlights(this.getMolDetails());this.setState({svg:e})}else if(t){var n=document.getElementById(this.props.id);this.state.mol.draw_to_canvas_with_highlights(n,this.getMolDetails())}}},{key:"isValidMol",value:function(){return!!this.state.mol&&this.state.mol.is_valid()}},{key:"isValidQMol",value:function(){return!!this.state.qmol&&this.state.qmol.is_valid()}},{key:"getMolDetails",value:function(){if(this.isValidMol()&&this.isValidQMol()){var t=JSON.parse(this.state.mol.get_substruct_match(this.state.qmol));return JSON.stringify(Object(p.a)(Object(p.a)({},this.MOL_DETAILS),t))}return JSON.stringify(this.MOL_DETAILS)}},{key:"componentDidMount",value:function(){var t=this;this.draw(),this.state.rdKitLoaded||window.initRDKitModule().then((function(e){window.RDKit=e,t.RDKit=window.RDKit,t.setState({rdKitLoaded:!0,rdKitError:!1})})).catch((function(){t.setState({rdKitLoaded:!1,rdKitError:!0})}))}},{key:"componentDidUpdate",value:function(t,e){var n=this;if(e.rdKitLoaded!==this.state.rdKitLoaded&&this.state.rdKitLoaded){var s,i,r={};s=this.state.mol||void 0,r.mol=this.RDKit.get_mol(this.props.structure),i=this.state.qmol||void 0,r.qmol=this.RDKit.get_qmol(this.props.subStructure),this.setState(Object(p.a)({},r),(function(){return n.draw()})),s&&s.delete(),i&&i.delete()}}},{key:"componentWillUnmount",value:function(){this.state.mol&&this.state.mol.delete(),this.state.qmol&&this.state.qmol.delete()}},{key:"render",value:function(){return this.state.rdKitError?"Error loading renderer.":this.state.rdKitLoaded?this.isValidMol()?this.props.svgMode?Object(d.jsx)("div",{title:this.props.structure,className:"molecule-structure-svg "+(this.props.className||""),style:{width:this.props.width,height:this.props.height},dangerouslySetInnerHTML:{__html:this.state.svg}}):Object(d.jsx)("div",{className:"molecule-canvas-container "+(this.props.className||""),children:Object(d.jsx)("canvas",{title:this.props.structure,id:this.props.id,width:this.props.width,height:this.props.height})}):Object(d.jsx)("span",{title:"Cannot render structure: ".concat(this.props.structure),children:"Render Error."}):"Loading renderer..."}}]),n}(s.Component));j.defaultProps={subStructure:"",className:"",width:250,height:200,svgMode:!1,extraDetails:{}};var O=j;var f=function(){return Object(d.jsxs)("div",{id:"component-example-canvas",className:"container",children:[Object(d.jsx)("section",{className:"hero",children:Object(d.jsxs)("div",{className:"hero-body",children:[Object(d.jsx)("p",{className:"title",children:"Substructure Highlight"}),Object(d.jsx)("p",{className:"subtitle",children:"You can also highlight substructure of molecules with both the SVG and Canvas APIs."})]})}),Object(d.jsxs)("div",{className:"columns is-desktop",children:[Object(d.jsx)("div",{className:"column",children:Object(d.jsx)(O,{width:350,height:300,svgMode:!0,structure:"CN1C=NC2=C1C(=O)N(C(=O)N2C)",subStructure:"[N,n,O;!H0]",id:"structure-example-substruct-svg-caffeine"})}),Object(d.jsx)("div",{className:"column",children:Object(d.jsx)(O,{width:350,height:300,structure:"CC(=O)Oc1ccccc1C(=O)O",subStructure:"CC(=O)Oc1ccccc1C",id:"structure-example-subsctruct-canvas-aspirin"})})]})]})};var N=function(){return Object(d.jsxs)("div",{id:"component-example-svg",className:"container",children:[Object(d.jsx)("section",{className:"hero",children:Object(d.jsxs)("div",{className:"hero-body",children:[Object(d.jsx)("p",{className:"title",children:"SVG Rendering"}),Object(d.jsx)("p",{className:"subtitle",children:"You can render molecules using svg and specify height and width."})]})}),Object(d.jsxs)("div",{className:"columns is-desktop",children:[Object(d.jsx)("div",{className:"column",children:Object(d.jsx)(O,{width:350,height:300,svgMode:!0,structure:"CN1C=NC2=C1C(=O)N(C(=O)N2C)",id:"structure-example-svg-caffeine"})}),Object(d.jsx)("div",{className:"column",children:Object(d.jsx)(O,{width:350,height:300,svgMode:!0,structure:"CC(=O)Oc1ccccc1C(=O)O",id:"structure-example-svg-aspirin"})})]})]})};n(244);r.a.render(Object(d.jsx)(u,{code:'import React, { Component } from "react";\nimport "./MoleculeStructure.css";\nimport PropTypes from "prop-types";\n\nclass MoleculeStructure extends Component {\n  static propTypes = {\n    /**\n     * Generic properties\n     */\n    id: PropTypes.string.isRequired,\n    className: PropTypes.string,\n    svgMode: PropTypes.bool,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    /**\n     * RDKit-specific properties\n     */\n    structure: PropTypes.string.isRequired,\n    subStructure: PropTypes.string,\n    extraDetails: PropTypes.object,\n  };\n\n  static defaultProps = {\n    subStructure: "",\n    className: "",\n    width: 250,\n    height: 200,\n    svgMode: false,\n    extraDetails: {},\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.RDKit = window.RDKit;\n\n    this.MOL_DETAILS = JSON.stringify({\n      width: this.props.width,\n      height: this.props.height,\n      bondLineWidth: 1,\n      addStereoAnnotation: true,\n      ...this.props.extraDetails,\n    });\n\n    const structure =\n      typeof this.props.structure === "string" ? this.props.structure : "";\n    const subStructure =\n      typeof this.props.subStructure === "string"\n        ? this.props.subStructure\n        : "";\n    this.state = {\n      svg: undefined,\n      mol: !!this.RDKit ? this.RDKit.get_mol(structure) : "",\n      qmol: this.RDKit ? this.RDKit.get_qmol(subStructure) : "",\n      rdKitLoaded: !!this.RDKit,\n      rdKitError: false,\n    };\n  }\n\n  draw() {\n    const isValidMol = this.isValidMol();\n    if (isValidMol && this.props.svgMode) {\n      const svg = this.state.mol.get_svg_with_highlights(this.getMolDetails());\n      this.setState({ svg });\n    } else if (isValidMol) {\n      const canvas = document.getElementById(this.props.id);\n      this.state.mol.draw_to_canvas_with_highlights(\n        canvas,\n        this.getMolDetails()\n      );\n    }\n  }\n\n  isValidMol() {\n    return !!this.state.mol && this.state.mol.is_valid();\n  }\n\n  isValidQMol() {\n    return !!this.state.qmol && this.state.qmol.is_valid();\n  }\n\n  getMolDetails() {\n    if (this.isValidMol() && this.isValidQMol()) {\n      const extraMolDetails = JSON.parse(\n        this.state.mol.get_substruct_match(this.state.qmol)\n      );\n      return JSON.stringify({\n        ...this.MOL_DETAILS,\n        ...extraMolDetails,\n      });\n    } else {\n      return JSON.stringify(this.MOL_DETAILS);\n    }\n  }\n\n  componentDidMount() {\n    this.draw();\n\n    if (!this.state.rdKitLoaded) {\n      window\n        .initRDKitModule()\n        .then((RDKit) => {\n          window.RDKit = RDKit;\n          this.RDKit = window.RDKit;\n          this.setState({ rdKitLoaded: true, rdKitError: false });\n        })\n        .catch(() => {\n          this.setState({ rdKitLoaded: false, rdKitError: true });\n        });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const rdkitStateChanged = prevState.rdKitLoaded !== this.state.rdKitLoaded;\n\n    if (rdkitStateChanged && this.state.rdKitLoaded) {\n      let oldMol, oldQMol;\n      const updateObject = {};\n\n      oldMol = this.state.mol || undefined;\n      updateObject.mol = this.RDKit.get_mol(this.props.structure);\n\n      oldQMol = this.state.qmol || undefined;\n      updateObject.qmol = this.RDKit.get_qmol(this.props.subStructure);\n\n      this.setState({ ...updateObject }, () => this.draw());\n\n      /**\n       * Delete C++ mol objects manually\n       * https://emscripten.org/docs/porting/connecting_cpp_and_javascript/embind.html#memory-management\n       */\n      if (oldMol) {\n        oldMol.delete();\n      }\n\n      if (oldQMol) {\n        oldQMol.delete();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    /**\n     * Delete C++ mol objects manually\n     * https://emscripten.org/docs/porting/connecting_cpp_and_javascript/embind.html#memory-management\n     */\n\n    if (this.state.mol) {\n      this.state.mol.delete();\n    }\n\n    if (this.state.qmol) {\n      this.state.qmol.delete();\n    }\n  }\n\n  render() {\n    if (this.state.rdKitError) {\n      return "Error loading renderer.";\n    }\n    if (!this.state.rdKitLoaded) {\n      return "Loading renderer...";\n    }\n\n    if (!this.isValidMol()) {\n      return (\n        <span title={`Cannot render structure: ${this.props.structure}`}>\n          Render Error.\n        </span>\n      );\n    } else if (this.props.svgMode) {\n      return (\n        <div\n          title={this.props.structure}\n          className={"molecule-structure-svg " + (this.props.className || "")}\n          style={{ width: this.props.width, height: this.props.height }}\n          dangerouslySetInnerHTML={{ __html: this.state.svg }}\n        ></div>\n      );\n    } else {\n      return (\n        <div\n          className={\n            "molecule-canvas-container " + (this.props.className || "")\n          }\n        >\n          <canvas\n            title={this.props.structure}\n            id={this.props.id}\n            width={this.props.width}\n            height={this.props.height}\n          ></canvas>\n        </div>\n      );\n    }\n  }\n}\n\nexport default MoleculeStructure;\n',children:Object(d.jsx)(h,{})}),document.getElementById("example-mol-structure")),r.a.render(Object(d.jsx)(u,{code:'import MoleculeStructure from "../components/MoleculeStructure/MoleculeStructure";\n\nfunction ExampleSVG() {\n  const caffeine = "CN1C=NC2=C1C(=O)N(C(=O)N2C)";\n  const aspirin = "CC(=O)Oc1ccccc1C(=O)O";\n\n  return (\n    <div id="component-example-svg" className="container">\n      <section className="hero">\n        <div className="hero-body">\n          <p className="title">SVG Rendering</p>\n          <p className="subtitle">\n            You can render molecules using svg and specify height and width.\n          </p>\n        </div>\n      </section>\n      <div className="columns is-desktop">\n        <div className="column">\n          <MoleculeStructure\n            width={350}\n            height={300}\n            svgMode\n            structure={caffeine}\n            id="structure-example-svg-caffeine"\n          />\n        </div>\n        <div className="column">\n          <MoleculeStructure\n            width={350}\n            height={300}\n            svgMode\n            structure={aspirin}\n            id="structure-example-svg-aspirin"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ExampleSVG;\n',children:Object(d.jsx)(N,{})}),document.getElementById("example-svg")),r.a.render(Object(d.jsx)(u,{code:'import MoleculeStructure from "../components/MoleculeStructure/MoleculeStructure";\n\nfunction ExampleCanvas() {\n  const caffeine = "CN1C=NC2=C1C(=O)N(C(=O)N2C)";\n  const aspirin = "CC(=O)Oc1ccccc1C(=O)O";\n\n  return (\n    <div id="component-example-canvas" className="container">\n      <section className="hero">\n        <div className="hero-body">\n          <p className="title">Canvas rendering</p>\n          <p className="subtitle">\n            You can also render molecules using the HTML Canvas API and specify\n            height and width.\n          </p>\n        </div>\n      </section>\n      <div className="columns is-desktop">\n        <div className="column">\n          <MoleculeStructure\n            width={350}\n            height={300}\n            structure={caffeine}\n            id="structure-example-canvas-caffeine"\n          />\n        </div>\n        <div className="column">\n          <MoleculeStructure\n            width={350}\n            height={300}\n            structure={aspirin}\n            id="structure-example-canvas-aspirin"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ExampleCanvas;\n',children:Object(d.jsx)(N,{})}),document.getElementById("example-canvas")),r.a.render(Object(d.jsx)(u,{code:'import MoleculeStructure from "../components/MoleculeStructure/MoleculeStructure";\n\nfunction ExampleSubstructure() {\n  const caffeine = "CN1C=NC2=C1C(=O)N(C(=O)N2C)";\n  const caffeineSubStruct = "[N,n,O;!H0]";\n\n  const aspirin = "CC(=O)Oc1ccccc1C(=O)O";\n  const aspirinSubStruct = "CC(=O)Oc1ccccc1C";\n\n  return (\n    <div id="component-example-canvas" className="container">\n      <section className="hero">\n        <div className="hero-body">\n          <p className="title">Substructure Highlight</p>\n          <p className="subtitle">\n            You can also highlight substructure of molecules with both the SVG\n            and Canvas APIs.\n          </p>\n        </div>\n      </section>\n      <div className="columns is-desktop">\n        <div className="column">\n          <MoleculeStructure\n            width={350}\n            height={300}\n            svgMode\n            structure={caffeine}\n            subStructure={caffeineSubStruct}\n            id="structure-example-substruct-svg-caffeine"\n          />\n        </div>\n        <div className="column">\n          <MoleculeStructure\n            width={350}\n            height={300}\n            structure={aspirin}\n            subStructure={aspirinSubStruct}\n            id="structure-example-subsctruct-canvas-aspirin"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ExampleSubstructure;\n',children:Object(d.jsx)(f,{})}),document.getElementById("example-substructures"))}},[[245,1,2]]]);
//# sourceMappingURL=main.6f50fb35.chunk.js.map