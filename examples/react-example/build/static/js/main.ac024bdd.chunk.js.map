{"version":3,"sources":["components/CodeExample/CodeExample.js","examples/ExampleMoleculeStructure.js","components/MoleculeStructure/MoleculeStructure.js","examples/ExampleSvg.js","index.js","webpack:///./src/components/MoleculeStructure/MoleculeStructure.js?34a0","webpack:///./src/examples/ExampleSvg.js?e959","examples/ExampleCanvas.js"],"names":["CodeExample","code","children","className","trigger","class","language","style","a11yDark","ExampleMoleculeStructure","id","MoleculeStructure","props","RDKit","window","MOL_DETAILS","JSON","stringify","width","DEFAULT_SIZE","height","bondLineWidth","addStereoAnnotation","structure","state","svg","undefined","mol","get_mol","rdKitLoaded","rdKitError","this","draw","initRDKitModule","then","setState","catch","prevProps","prevState","rdkitStateChanged","structureChanged","oldMol","isValidMol","svgMode","get_svg_with_highlights","canvas","document","getElementById","draw_to_canvas_with_highlights","title","dangerouslySetInnerHTML","__html","substring","is_valid","Component","ExampleSVG","ReactDOM","render"],"mappings":"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","file":"static/js/main.ac024bdd.chunk.js","sourcesContent":["import SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { a11yDark } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\nimport ReactCollapsible from \"react-collapsible\";\n\nfunction CodeExample({ code, children }) {\n  return (\n    <>\n      {children}\n      <div className=\"container\">\n        <ReactCollapsible\n          trigger={\n            <button class=\"button is-primary is-light is-large is-fullwidth\">\n              See Code Example\n            </button>\n          }\n        >\n          <div className=\"container\">\n            <SyntaxHighlighter language=\"javascript\" style={a11yDark}>\n              {code}\n            </SyntaxHighlighter>\n          </div>\n        </ReactCollapsible>\n      </div>\n    </>\n  );\n}\n\nexport default CodeExample;\n","function ExampleMoleculeStructure() {\n  return (\n    <div id=\"component-example-svg\" className=\"container\">\n      <section class=\"hero\">\n        <div class=\"hero-body\">\n          <p class=\"title\">MoleculeStructure - A Basic React Component</p>\n          <p class=\"subtitle\">\n            The examples below will mostly use the React component{\" \"}\n            <code className=\"is-family-code\">MoleculeStructure</code> to render\n            the examples. You can see the React implementation in the code\n            below.\n          </p>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default ExampleMoleculeStructure;\n","import React, { Component } from \"react\";\nimport \"./MoleculeStructure.css\";\nimport PropTypes from \"prop-types\";\n\nclass MoleculeStructure extends Component {\n  static DEFAULT_SIZE = {\n    width: 250,\n    height: 200,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.RDKit = window.RDKit;\n\n    this.MOL_DETAILS = JSON.stringify({\n      width: this.props.width || MoleculeStructure.DEFAULT_SIZE.width,\n      height: this.props.height || MoleculeStructure.DEFAULT_SIZE.height,\n      bondLineWidth: 1,\n      addStereoAnnotation: true,\n    });\n\n    const structure =\n      typeof this.props.structure === \"string\" ? this.props.structure : \"\";\n    this.state = {\n      svg: undefined,\n      mol: this.RDKit && this.RDKit.get_mol(structure),\n      rdKitLoaded: !!this.RDKit,\n      rdKitError: false,\n    };\n  }\n\n  componentDidMount() {\n    this.draw();\n\n    if (!this.state.rdKitLoaded) {\n      window\n        .initRDKitModule()\n        .then((RDKit) => {\n          window.RDKit = RDKit;\n          this.RDKit = window.RDKit;\n          this.setState({ rdKitLoaded: true, rdKitError: false });\n        })\n        .catch(() => {\n          this.setState({ rdKitLoaded: false, rdKitError: true });\n        });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const rdkitStateChanged = prevState.rdKitLoaded !== this.state.rdKitLoaded;\n    const structureChanged = prevProps.structure !== this.props.structure;\n\n    if (rdkitStateChanged || structureChanged) {\n      let oldMol = this.state.mol || {};\n      this.setState({ mol: this.RDKit.get_mol(this.props.structure) }, () =>\n        this.draw()\n      );\n      /**\n       * attempt at forcing old mol objects\n       * to be garbage collected\n       */\n      if (typeof oldMol === \"object\") {\n        oldMol = null;\n      }\n    }\n  }\n\n  draw() {\n    const isValidMol = this.isValidMol();\n    if (isValidMol && this.props.svgMode) {\n      const svg = this.state.mol.get_svg_with_highlights(this.MOL_DETAILS);\n      this.setState({ svg });\n    } else if (isValidMol) {\n      const canvas = document.getElementById(this.props.id);\n      this.state.mol.draw_to_canvas_with_highlights(canvas, this.MOL_DETAILS);\n    }\n  }\n\n  render() {\n    if (this.state.rdKitError) {\n      return \"Error loading renderer.\";\n    }\n    if (!this.state.rdKitLoaded) {\n      return \"Loading renderer...\";\n    }\n\n    let compound = null;\n    if (!this.isValidMol()) {\n      compound = (\n        <span title={this.props.structure}>\n          {this.props.structure.substring(0, 6)} ...\n        </span>\n      );\n    } else if (this.props.svgMode) {\n      compound = (\n        <div\n          title={this.props.structure}\n          className={\"molecule-structure-svg \" + (this.props.className || \"\")}\n          style={{ width: this.props.width, height: this.props.height }}\n          dangerouslySetInnerHTML={{ __html: this.state.svg }}\n        ></div>\n      );\n    } else {\n      compound = (\n        <canvas\n          title={this.props.structure}\n          id={this.props.id}\n          width={this.props.width}\n          height={this.props.height}\n        ></canvas>\n      );\n    }\n\n    return compound;\n  }\n\n  isValidMol() {\n    return !!this.state.mol && this.state.mol.is_valid();\n  }\n}\n\nMoleculeStructure.propTypes = {\n  id: PropTypes.string.isRequired,\n  structure: PropTypes.string.isRequired,\n  className: PropTypes.string,\n  svgMode: PropTypes.bool,\n  width: PropTypes.number,\n  height: PropTypes.number,\n};\n\nexport default MoleculeStructure;\n","import MoleculeStructure from \"../components/MoleculeStructure/MoleculeStructure\";\n\nfunction ExampleSVG() {\n  const caffeine = \"CN1C=NC2=C1C(=O)N(C(=O)N2C)\";\n  const aspirin = \"CC(=O)Oc1ccccc1C(=O)O\";\n\n  return (\n    <div id=\"component-example-svg\" className=\"container\">\n      <section class=\"hero\">\n        <div class=\"hero-body\">\n          <p class=\"title\">SVG Rendering</p>\n          <p class=\"subtitle\">\n            You can render molecules using svg and specify height and width.\n          </p>\n        </div>\n      </section>\n      <div className=\"columns is-desktop\">\n        <div className=\"column\">\n          <MoleculeStructure\n            width={350}\n            height={300}\n            svgMode\n            structure={caffeine}\n            id=\"structure-example-svg-caffeine\"\n          />\n        </div>\n        <div className=\"column\">\n          <MoleculeStructure\n            width={350}\n            height={300}\n            svgMode\n            structure={aspirin}\n            id=\"structure-example-svg-aspirin\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ExampleSVG;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport CodeExample from \"./components/CodeExample/CodeExample\";\nimport ExampleMoleculeStructure from \"./examples/ExampleMoleculeStructure\";\nimport ExampleSVG from \"./examples/ExampleSvg\";\nimport ExampleCanvas from \"./examples/ExampleSvg\";\n/* eslint import/no-webpack-loader-syntax: off */\nimport MoleculeStructureCode from \"!!raw-loader!./components/MoleculeStructure/MoleculeStructure\";\nimport ExampleSVGCode from \"!!raw-loader!./examples/ExampleSvg.js\";\nimport ExampleCanvasCode from \"!!raw-loader!./examples/ExampleCanvas.js\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <CodeExample code={MoleculeStructureCode}>\n    <ExampleMoleculeStructure />\n  </CodeExample>,\n  document.getElementById(\"example-mol-structure\")\n);\n\nReactDOM.render(\n  <CodeExample code={ExampleSVGCode}>\n    <ExampleSVG />\n  </CodeExample>,\n  document.getElementById(\"example-svg\")\n);\n\nReactDOM.render(\n  <CodeExample code={ExampleCanvasCode}>\n    <ExampleCanvas />\n  </CodeExample>,\n  document.getElementById(\"example-canvas\")\n);\n","export default \"import React, { Component } from \\\"react\\\";\\nimport \\\"./MoleculeStructure.css\\\";\\nimport PropTypes from \\\"prop-types\\\";\\n\\nclass MoleculeStructure extends Component {\\n  static DEFAULT_SIZE = {\\n    width: 250,\\n    height: 200,\\n  };\\n\\n  constructor(props) {\\n    super(props);\\n\\n    this.RDKit = window.RDKit;\\n\\n    this.MOL_DETAILS = JSON.stringify({\\n      width: this.props.width || MoleculeStructure.DEFAULT_SIZE.width,\\n      height: this.props.height || MoleculeStructure.DEFAULT_SIZE.height,\\n      bondLineWidth: 1,\\n      addStereoAnnotation: true,\\n    });\\n\\n    const structure =\\n      typeof this.props.structure === \\\"string\\\" ? this.props.structure : \\\"\\\";\\n    this.state = {\\n      svg: undefined,\\n      mol: this.RDKit && this.RDKit.get_mol(structure),\\n      rdKitLoaded: !!this.RDKit,\\n      rdKitError: false,\\n    };\\n  }\\n\\n  componentDidMount() {\\n    this.draw();\\n\\n    if (!this.state.rdKitLoaded) {\\n      window\\n        .initRDKitModule()\\n        .then((RDKit) => {\\n          window.RDKit = RDKit;\\n          this.RDKit = window.RDKit;\\n          this.setState({ rdKitLoaded: true, rdKitError: false });\\n        })\\n        .catch(() => {\\n          this.setState({ rdKitLoaded: false, rdKitError: true });\\n        });\\n    }\\n  }\\n\\n  componentDidUpdate(prevProps, prevState) {\\n    const rdkitStateChanged = prevState.rdKitLoaded !== this.state.rdKitLoaded;\\n    const structureChanged = prevProps.structure !== this.props.structure;\\n\\n    if (rdkitStateChanged || structureChanged) {\\n      let oldMol = this.state.mol || {};\\n      this.setState({ mol: this.RDKit.get_mol(this.props.structure) }, () =>\\n        this.draw()\\n      );\\n      /**\\n       * attempt at forcing old mol objects\\n       * to be garbage collected\\n       */\\n      if (typeof oldMol === \\\"object\\\") {\\n        oldMol = null;\\n      }\\n    }\\n  }\\n\\n  draw() {\\n    const isValidMol = this.isValidMol();\\n    if (isValidMol && this.props.svgMode) {\\n      const svg = this.state.mol.get_svg_with_highlights(this.MOL_DETAILS);\\n      this.setState({ svg });\\n    } else if (isValidMol) {\\n      const canvas = document.getElementById(this.props.id);\\n      this.state.mol.draw_to_canvas_with_highlights(canvas, this.MOL_DETAILS);\\n    }\\n  }\\n\\n  render() {\\n    if (this.state.rdKitError) {\\n      return \\\"Error loading renderer.\\\";\\n    }\\n    if (!this.state.rdKitLoaded) {\\n      return \\\"Loading renderer...\\\";\\n    }\\n\\n    let compound = null;\\n    if (!this.isValidMol()) {\\n      compound = (\\n        <span title={this.props.structure}>\\n          {this.props.structure.substring(0, 6)} ...\\n        </span>\\n      );\\n    } else if (this.props.svgMode) {\\n      compound = (\\n        <div\\n          title={this.props.structure}\\n          className={\\\"molecule-structure-svg \\\" + (this.props.className || \\\"\\\")}\\n          style={{ width: this.props.width, height: this.props.height }}\\n          dangerouslySetInnerHTML={{ __html: this.state.svg }}\\n        ></div>\\n      );\\n    } else {\\n      compound = (\\n        <canvas\\n          title={this.props.structure}\\n          id={this.props.id}\\n          width={this.props.width}\\n          height={this.props.height}\\n        ></canvas>\\n      );\\n    }\\n\\n    return compound;\\n  }\\n\\n  isValidMol() {\\n    return !!this.state.mol && this.state.mol.is_valid();\\n  }\\n}\\n\\nMoleculeStructure.propTypes = {\\n  id: PropTypes.string.isRequired,\\n  structure: PropTypes.string.isRequired,\\n  className: PropTypes.string,\\n  svgMode: PropTypes.bool,\\n  width: PropTypes.number,\\n  height: PropTypes.number,\\n};\\n\\nexport default MoleculeStructure;\\n\";","export default \"import MoleculeStructure from \\\"../components/MoleculeStructure/MoleculeStructure\\\";\\n\\nfunction ExampleSVG() {\\n  const caffeine = \\\"CN1C=NC2=C1C(=O)N(C(=O)N2C)\\\";\\n  const aspirin = \\\"CC(=O)Oc1ccccc1C(=O)O\\\";\\n\\n  return (\\n    <div id=\\\"component-example-svg\\\" className=\\\"container\\\">\\n      <section class=\\\"hero\\\">\\n        <div class=\\\"hero-body\\\">\\n          <p class=\\\"title\\\">SVG Rendering</p>\\n          <p class=\\\"subtitle\\\">\\n            You can render molecules using svg and specify height and width.\\n          </p>\\n        </div>\\n      </section>\\n      <div className=\\\"columns is-desktop\\\">\\n        <div className=\\\"column\\\">\\n          <MoleculeStructure\\n            width={350}\\n            height={300}\\n            svgMode\\n            structure={caffeine}\\n            id=\\\"structure-example-svg-caffeine\\\"\\n          />\\n        </div>\\n        <div className=\\\"column\\\">\\n          <MoleculeStructure\\n            width={350}\\n            height={300}\\n            svgMode\\n            structure={aspirin}\\n            id=\\\"structure-example-svg-aspirin\\\"\\n          />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default ExampleSVG;\\n\";","export default \"import MoleculeStructure from \\\"../components/MoleculeStructure/MoleculeStructure\\\";\\n\\nfunction ExampleCanvas() {\\n  const caffeine = \\\"CN1C=NC2=C1C(=O)N(C(=O)N2C)\\\";\\n  const aspirin = \\\"CC(=O)Oc1ccccc1C(=O)O\\\";\\n\\n  return (\\n    <div id=\\\"component-example-canvas\\\" className=\\\"container\\\">\\n      <section class=\\\"hero\\\">\\n        <div class=\\\"hero-body\\\">\\n          <p class=\\\"title\\\">Canvas rendering</p>\\n          <p class=\\\"subtitle\\\">\\n            You can also render molecules using the HTML Canvas API and specify\\n            height and width.\\n          </p>\\n        </div>\\n      </section>\\n      <div className=\\\"columns is-desktop\\\">\\n        <div className=\\\"column\\\">\\n          <MoleculeStructure\\n            width={350}\\n            height={300}\\n            structure={caffeine}\\n            id=\\\"structure-example-canvas-caffeine\\\"\\n          />\\n        </div>\\n        <div className=\\\"column\\\">\\n          <MoleculeStructure\\n            width={350}\\n            height={300}\\n            structure={aspirin}\\n            id=\\\"structure-example-canvas-aspirin\\\"\\n          />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default ExampleCanvas;\\n\";"],"sourceRoot":""}