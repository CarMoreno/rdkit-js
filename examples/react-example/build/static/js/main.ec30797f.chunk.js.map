{"version":3,"sources":["components/CodeExample/CodeExample.js","examples/ExampleMoleculeStructure.js","components/MoleculeStructure/MoleculeStructure.js","examples/ExampleSubstructure.js","examples/ExampleSvg.js","examples/ExampleCanvas.js","index.js","webpack:///./src/components/MoleculeStructure/MoleculeStructure.js?34a0","webpack:///./src/examples/ExampleSvg.js?e959","webpack:///./src/examples/ExampleCanvas.js?b4aa","webpack:///./src/examples/ExampleSubstructure.js?a3ad"],"names":["CodeExample","code","children","className","trigger","language","style","a11yDark","ExampleMoleculeStructure","id","MoleculeStructure","props","RDKit","window","MOL_DETAILS","JSON","stringify","width","height","bondLineWidth","addStereoAnnotation","extraDetails","structure","subStructure","state","svg","undefined","mol","get_mol","qmol","get_qmol","rdKitLoaded","rdKitError","isValidMol","this","svgMode","get_svg_with_highlights","getMolDetails","setState","canvas","document","getElementById","draw_to_canvas_with_highlights","is_valid","isValidQMol","extraMolDetails","parse","get_substruct_match","draw","initRDKitModule","then","catch","prevProps","prevState","oldMol","oldQMol","updateObject","delete","title","dangerouslySetInnerHTML","__html","Component","defaultProps","ExampleSubstructure","ExampleSVG","ExampleCanvas","ReactDOM","render"],"mappings":"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","file":"static/js/main.ec30797f.chunk.js","sourcesContent":["import SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { a11yDark } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\nimport ReactCollapsible from \"react-collapsible\";\n\nfunction CodeExample({ code, children }) {\n  return (\n    <>\n      {children}\n      <div className=\"container\">\n        <ReactCollapsible\n          trigger={\n            <button className=\"button is-primary is-light is-large is-fullwidth\">\n              See Code Example\n            </button>\n          }\n        >\n          <div className=\"container\">\n            <SyntaxHighlighter language=\"javascript\" style={a11yDark}>\n              {code}\n            </SyntaxHighlighter>\n          </div>\n        </ReactCollapsible>\n      </div>\n    </>\n  );\n}\n\nexport default CodeExample;\n","function ExampleMoleculeStructure() {\n  return (\n    <div id=\"component-example-svg\" className=\"container\">\n      <section className=\"hero\">\n        <div className=\"hero-body\">\n          <p className=\"title\">MoleculeStructure - A Basic React Component</p>\n          <p className=\"subtitle\">\n            The examples below will mostly use the React component{\" \"}\n            <code className=\"is-family-code\">MoleculeStructure</code> to render\n            the examples. You can see the React implementation in the code\n            below.\n          </p>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default ExampleMoleculeStructure;\n","import React, { Component } from \"react\";\nimport \"./MoleculeStructure.css\";\nimport PropTypes from \"prop-types\";\n\nclass MoleculeStructure extends Component {\n  static propTypes = {\n    /**\n     * Generic properties\n     */\n    id: PropTypes.string.isRequired,\n    className: PropTypes.string,\n    svgMode: PropTypes.bool,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    /**\n     * RDKit-specific properties\n     */\n    structure: PropTypes.string.isRequired,\n    subStructure: PropTypes.string,\n    extraDetails: PropTypes.object,\n  };\n\n  static defaultProps = {\n    subStructure: \"\",\n    className: \"\",\n    width: 250,\n    height: 200,\n    svgMode: false,\n    extraDetails: {},\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.RDKit = window.RDKit;\n\n    this.MOL_DETAILS = JSON.stringify({\n      width: this.props.width,\n      height: this.props.height,\n      bondLineWidth: 1,\n      addStereoAnnotation: true,\n      ...this.props.extraDetails,\n    });\n\n    const structure =\n      typeof this.props.structure === \"string\" ? this.props.structure : \"\";\n    const subStructure =\n      typeof this.props.subStructure === \"string\"\n        ? this.props.subStructure\n        : \"\";\n    this.state = {\n      svg: undefined,\n      mol: !!this.RDKit ? this.RDKit.get_mol(structure) : \"\",\n      qmol: this.RDKit ? this.RDKit.get_qmol(subStructure) : \"\",\n      rdKitLoaded: !!this.RDKit,\n      rdKitError: false,\n    };\n  }\n\n  draw() {\n    const isValidMol = this.isValidMol();\n    if (isValidMol && this.props.svgMode) {\n      const svg = this.state.mol.get_svg_with_highlights(this.getMolDetails());\n      this.setState({ svg });\n    } else if (isValidMol) {\n      const canvas = document.getElementById(this.props.id);\n      this.state.mol.draw_to_canvas_with_highlights(\n        canvas,\n        this.getMolDetails()\n      );\n    }\n  }\n\n  isValidMol() {\n    return !!this.state.mol && this.state.mol.is_valid();\n  }\n\n  isValidQMol() {\n    return !!this.state.qmol && this.state.qmol.is_valid();\n  }\n\n  getMolDetails() {\n    if (this.isValidMol() && this.isValidQMol()) {\n      const extraMolDetails = JSON.parse(\n        this.state.mol.get_substruct_match(this.state.qmol)\n      );\n      return JSON.stringify({\n        ...this.MOL_DETAILS,\n        ...extraMolDetails,\n      });\n    } else {\n      return JSON.stringify(this.MOL_DETAILS);\n    }\n  }\n\n  componentDidMount() {\n    this.draw();\n\n    if (!this.state.rdKitLoaded) {\n      window\n        .initRDKitModule()\n        .then((RDKit) => {\n          window.RDKit = RDKit;\n          this.RDKit = window.RDKit;\n          this.setState({ rdKitLoaded: true, rdKitError: false });\n        })\n        .catch(() => {\n          this.setState({ rdKitLoaded: false, rdKitError: true });\n        });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const rdkitStateChanged = prevState.rdKitLoaded !== this.state.rdKitLoaded;\n\n    if (rdkitStateChanged && this.state.rdKitLoaded) {\n      let oldMol, oldQMol;\n      const updateObject = {};\n\n      oldMol = this.state.mol || undefined;\n      updateObject.mol = this.RDKit.get_mol(this.props.structure);\n\n      oldQMol = this.state.qmol || undefined;\n      updateObject.qmol = this.RDKit.get_qmol(this.props.subStructure);\n\n      this.setState({ ...updateObject }, () => this.draw());\n\n      /**\n       * Delete C++ mol objects manually\n       * https://emscripten.org/docs/porting/connecting_cpp_and_javascript/embind.html#memory-management\n       */\n      if (oldMol) {\n        oldMol.delete();\n      }\n\n      if (oldQMol) {\n        oldQMol.delete();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    /**\n     * Delete C++ mol objects manually\n     * https://emscripten.org/docs/porting/connecting_cpp_and_javascript/embind.html#memory-management\n     */\n\n    if (this.state.mol) {\n      this.state.mol.delete();\n    }\n\n    if (this.state.qmol) {\n      this.state.qmol.delete();\n    }\n  }\n\n  render() {\n    if (this.state.rdKitError) {\n      return \"Error loading renderer.\";\n    }\n    if (!this.state.rdKitLoaded) {\n      return \"Loading renderer...\";\n    }\n\n    if (!this.isValidMol()) {\n      return (\n        <span title={`Cannot render structure: ${this.props.structure}`}>\n          Render Error.\n        </span>\n      );\n    } else if (this.props.svgMode) {\n      return (\n        <div\n          title={this.props.structure}\n          className={\"molecule-structure-svg \" + (this.props.className || \"\")}\n          style={{ width: this.props.width, height: this.props.height }}\n          dangerouslySetInnerHTML={{ __html: this.state.svg }}\n        ></div>\n      );\n    } else {\n      return (\n        <div\n          className={\n            \"molecule-canvas-container \" + (this.props.className || \"\")\n          }\n        >\n          <canvas\n            title={this.props.structure}\n            id={this.props.id}\n            width={this.props.width}\n            height={this.props.height}\n          ></canvas>\n        </div>\n      );\n    }\n  }\n}\n\nexport default MoleculeStructure;\n","import MoleculeStructure from \"../components/MoleculeStructure/MoleculeStructure\";\n\nfunction ExampleSubstructure() {\n  const caffeine = \"CN1C=NC2=C1C(=O)N(C(=O)N2C)\";\n  const caffeineSubStruct = \"[N,n,O;!H0]\";\n\n  const aspirin = \"CC(=O)Oc1ccccc1C(=O)O\";\n  const aspirinSubStruct = \"CC(=O)Oc1ccccc1C\";\n\n  return (\n    <div id=\"component-example-canvas\" className=\"container\">\n      <section className=\"hero\">\n        <div className=\"hero-body\">\n          <p className=\"title\">Substructure Highlight</p>\n          <p className=\"subtitle\">\n            You can also highlight substructure of molecules with both the SVG\n            and Canvas APIs.\n          </p>\n        </div>\n      </section>\n      <div className=\"columns is-desktop\">\n        <div className=\"column\">\n          <MoleculeStructure\n            width={350}\n            height={300}\n            svgMode\n            structure={caffeine}\n            subStructure={caffeineSubStruct}\n            id=\"structure-example-substruct-svg-caffeine\"\n          />\n        </div>\n        <div className=\"column\">\n          <MoleculeStructure\n            width={350}\n            height={300}\n            structure={aspirin}\n            subStructure={aspirinSubStruct}\n            id=\"structure-example-subsctruct-canvas-aspirin\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ExampleSubstructure;\n","import MoleculeStructure from \"../components/MoleculeStructure/MoleculeStructure\";\n\nfunction ExampleSVG() {\n  const caffeine = \"CN1C=NC2=C1C(=O)N(C(=O)N2C)\";\n  const aspirin = \"CC(=O)Oc1ccccc1C(=O)O\";\n\n  return (\n    <div id=\"component-example-svg\" className=\"container\">\n      <section className=\"hero\">\n        <div className=\"hero-body\">\n          <p className=\"title\">SVG Rendering</p>\n          <p className=\"subtitle\">\n            You can render molecules using svg and specify height and width.\n          </p>\n        </div>\n      </section>\n      <div className=\"columns is-desktop\">\n        <div className=\"column\">\n          <MoleculeStructure\n            width={350}\n            height={300}\n            svgMode\n            structure={caffeine}\n            id=\"structure-example-svg-caffeine\"\n          />\n        </div>\n        <div className=\"column\">\n          <MoleculeStructure\n            width={350}\n            height={300}\n            svgMode\n            structure={aspirin}\n            id=\"structure-example-svg-aspirin\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ExampleSVG;\n","import MoleculeStructure from \"../components/MoleculeStructure/MoleculeStructure\";\n\nfunction ExampleCanvas() {\n  const caffeine = \"CN1C=NC2=C1C(=O)N(C(=O)N2C)\";\n  const aspirin = \"CC(=O)Oc1ccccc1C(=O)O\";\n\n  return (\n    <div id=\"component-example-canvas\" className=\"container\">\n      <section className=\"hero\">\n        <div className=\"hero-body\">\n          <p className=\"title\">Canvas rendering</p>\n          <p className=\"subtitle\">\n            You can also render molecules using the HTML Canvas API and specify\n            height and width.\n          </p>\n        </div>\n      </section>\n      <div className=\"columns is-desktop\">\n        <div className=\"column\">\n          <MoleculeStructure\n            width={350}\n            height={300}\n            structure={caffeine}\n            id=\"structure-example-canvas-caffeine\"\n          />\n        </div>\n        <div className=\"column\">\n          <MoleculeStructure\n            width={350}\n            height={300}\n            structure={aspirin}\n            id=\"structure-example-canvas-aspirin\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ExampleCanvas;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport CodeExample from \"./components/CodeExample/CodeExample\";\nimport ExampleMoleculeStructure from \"./examples/ExampleMoleculeStructure\";\nimport ExampleSubstructure from \"./examples/ExampleSubstructure\";\nimport ExampleSVG from \"./examples/ExampleSvg\";\nimport ExampleCanvas from \"./examples/ExampleCanvas\";\n/* eslint import/no-webpack-loader-syntax: off */\nimport MoleculeStructureCode from \"!!raw-loader!./components/MoleculeStructure/MoleculeStructure\";\nimport ExampleSVGCode from \"!!raw-loader!./examples/ExampleSvg.js\";\nimport ExampleCanvasCode from \"!!raw-loader!./examples/ExampleCanvas.js\";\nimport ExampleSubstructureCode from \"!!raw-loader!./examples/ExampleSubstructure.js\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <CodeExample code={MoleculeStructureCode}>\n    <ExampleMoleculeStructure />\n  </CodeExample>,\n  document.getElementById(\"example-mol-structure\")\n);\n\nReactDOM.render(\n  <CodeExample code={ExampleSVGCode}>\n    <ExampleSVG />\n  </CodeExample>,\n  document.getElementById(\"example-svg\")\n);\n\nReactDOM.render(\n  <CodeExample code={ExampleCanvasCode}>\n    <ExampleCanvas />\n  </CodeExample>,\n  document.getElementById(\"example-canvas\")\n);\n\nReactDOM.render(\n  <CodeExample code={ExampleSubstructureCode}>\n    <ExampleSubstructure />\n  </CodeExample>,\n  document.getElementById(\"example-substructures\")\n);\n","export default \"import React, { Component } from \\\"react\\\";\\nimport \\\"./MoleculeStructure.css\\\";\\nimport PropTypes from \\\"prop-types\\\";\\n\\nclass MoleculeStructure extends Component {\\n  static propTypes = {\\n    /**\\n     * Generic properties\\n     */\\n    id: PropTypes.string.isRequired,\\n    className: PropTypes.string,\\n    svgMode: PropTypes.bool,\\n    width: PropTypes.number,\\n    height: PropTypes.number,\\n    /**\\n     * RDKit-specific properties\\n     */\\n    structure: PropTypes.string.isRequired,\\n    subStructure: PropTypes.string,\\n    extraDetails: PropTypes.object,\\n  };\\n\\n  static defaultProps = {\\n    subStructure: \\\"\\\",\\n    className: \\\"\\\",\\n    width: 250,\\n    height: 200,\\n    svgMode: false,\\n    extraDetails: {},\\n  };\\n\\n  constructor(props) {\\n    super(props);\\n\\n    this.RDKit = window.RDKit;\\n\\n    this.MOL_DETAILS = JSON.stringify({\\n      width: this.props.width,\\n      height: this.props.height,\\n      bondLineWidth: 1,\\n      addStereoAnnotation: true,\\n      ...this.props.extraDetails,\\n    });\\n\\n    const structure =\\n      typeof this.props.structure === \\\"string\\\" ? this.props.structure : \\\"\\\";\\n    const subStructure =\\n      typeof this.props.subStructure === \\\"string\\\"\\n        ? this.props.subStructure\\n        : \\\"\\\";\\n    this.state = {\\n      svg: undefined,\\n      mol: !!this.RDKit ? this.RDKit.get_mol(structure) : \\\"\\\",\\n      qmol: this.RDKit ? this.RDKit.get_qmol(subStructure) : \\\"\\\",\\n      rdKitLoaded: !!this.RDKit,\\n      rdKitError: false,\\n    };\\n  }\\n\\n  draw() {\\n    const isValidMol = this.isValidMol();\\n    if (isValidMol && this.props.svgMode) {\\n      const svg = this.state.mol.get_svg_with_highlights(this.getMolDetails());\\n      this.setState({ svg });\\n    } else if (isValidMol) {\\n      const canvas = document.getElementById(this.props.id);\\n      this.state.mol.draw_to_canvas_with_highlights(\\n        canvas,\\n        this.getMolDetails()\\n      );\\n    }\\n  }\\n\\n  isValidMol() {\\n    return !!this.state.mol && this.state.mol.is_valid();\\n  }\\n\\n  isValidQMol() {\\n    return !!this.state.qmol && this.state.qmol.is_valid();\\n  }\\n\\n  getMolDetails() {\\n    if (this.isValidMol() && this.isValidQMol()) {\\n      const extraMolDetails = JSON.parse(\\n        this.state.mol.get_substruct_match(this.state.qmol)\\n      );\\n      return JSON.stringify({\\n        ...this.MOL_DETAILS,\\n        ...extraMolDetails,\\n      });\\n    } else {\\n      return JSON.stringify(this.MOL_DETAILS);\\n    }\\n  }\\n\\n  componentDidMount() {\\n    this.draw();\\n\\n    if (!this.state.rdKitLoaded) {\\n      window\\n        .initRDKitModule()\\n        .then((RDKit) => {\\n          window.RDKit = RDKit;\\n          this.RDKit = window.RDKit;\\n          this.setState({ rdKitLoaded: true, rdKitError: false });\\n        })\\n        .catch(() => {\\n          this.setState({ rdKitLoaded: false, rdKitError: true });\\n        });\\n    }\\n  }\\n\\n  componentDidUpdate(prevProps, prevState) {\\n    const rdkitStateChanged = prevState.rdKitLoaded !== this.state.rdKitLoaded;\\n\\n    if (rdkitStateChanged && this.state.rdKitLoaded) {\\n      let oldMol, oldQMol;\\n      const updateObject = {};\\n\\n      oldMol = this.state.mol || undefined;\\n      updateObject.mol = this.RDKit.get_mol(this.props.structure);\\n\\n      oldQMol = this.state.qmol || undefined;\\n      updateObject.qmol = this.RDKit.get_qmol(this.props.subStructure);\\n\\n      this.setState({ ...updateObject }, () => this.draw());\\n\\n      /**\\n       * Delete C++ mol objects manually\\n       * https://emscripten.org/docs/porting/connecting_cpp_and_javascript/embind.html#memory-management\\n       */\\n      if (oldMol) {\\n        oldMol.delete();\\n      }\\n\\n      if (oldQMol) {\\n        oldQMol.delete();\\n      }\\n    }\\n  }\\n\\n  componentWillUnmount() {\\n    /**\\n     * Delete C++ mol objects manually\\n     * https://emscripten.org/docs/porting/connecting_cpp_and_javascript/embind.html#memory-management\\n     */\\n\\n    if (this.state.mol) {\\n      this.state.mol.delete();\\n    }\\n\\n    if (this.state.qmol) {\\n      this.state.qmol.delete();\\n    }\\n  }\\n\\n  render() {\\n    if (this.state.rdKitError) {\\n      return \\\"Error loading renderer.\\\";\\n    }\\n    if (!this.state.rdKitLoaded) {\\n      return \\\"Loading renderer...\\\";\\n    }\\n\\n    if (!this.isValidMol()) {\\n      return (\\n        <span title={`Cannot render structure: ${this.props.structure}`}>\\n          Render Error.\\n        </span>\\n      );\\n    } else if (this.props.svgMode) {\\n      return (\\n        <div\\n          title={this.props.structure}\\n          className={\\\"molecule-structure-svg \\\" + (this.props.className || \\\"\\\")}\\n          style={{ width: this.props.width, height: this.props.height }}\\n          dangerouslySetInnerHTML={{ __html: this.state.svg }}\\n        ></div>\\n      );\\n    } else {\\n      return (\\n        <div\\n          className={\\n            \\\"molecule-canvas-container \\\" + (this.props.className || \\\"\\\")\\n          }\\n        >\\n          <canvas\\n            title={this.props.structure}\\n            id={this.props.id}\\n            width={this.props.width}\\n            height={this.props.height}\\n          ></canvas>\\n        </div>\\n      );\\n    }\\n  }\\n}\\n\\nexport default MoleculeStructure;\\n\";","export default \"import MoleculeStructure from \\\"../components/MoleculeStructure/MoleculeStructure\\\";\\n\\nfunction ExampleSVG() {\\n  const caffeine = \\\"CN1C=NC2=C1C(=O)N(C(=O)N2C)\\\";\\n  const aspirin = \\\"CC(=O)Oc1ccccc1C(=O)O\\\";\\n\\n  return (\\n    <div id=\\\"component-example-svg\\\" className=\\\"container\\\">\\n      <section className=\\\"hero\\\">\\n        <div className=\\\"hero-body\\\">\\n          <p className=\\\"title\\\">SVG Rendering</p>\\n          <p className=\\\"subtitle\\\">\\n            You can render molecules using svg and specify height and width.\\n          </p>\\n        </div>\\n      </section>\\n      <div className=\\\"columns is-desktop\\\">\\n        <div className=\\\"column\\\">\\n          <MoleculeStructure\\n            width={350}\\n            height={300}\\n            svgMode\\n            structure={caffeine}\\n            id=\\\"structure-example-svg-caffeine\\\"\\n          />\\n        </div>\\n        <div className=\\\"column\\\">\\n          <MoleculeStructure\\n            width={350}\\n            height={300}\\n            svgMode\\n            structure={aspirin}\\n            id=\\\"structure-example-svg-aspirin\\\"\\n          />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default ExampleSVG;\\n\";","export default \"import MoleculeStructure from \\\"../components/MoleculeStructure/MoleculeStructure\\\";\\n\\nfunction ExampleCanvas() {\\n  const caffeine = \\\"CN1C=NC2=C1C(=O)N(C(=O)N2C)\\\";\\n  const aspirin = \\\"CC(=O)Oc1ccccc1C(=O)O\\\";\\n\\n  return (\\n    <div id=\\\"component-example-canvas\\\" className=\\\"container\\\">\\n      <section className=\\\"hero\\\">\\n        <div className=\\\"hero-body\\\">\\n          <p className=\\\"title\\\">Canvas rendering</p>\\n          <p className=\\\"subtitle\\\">\\n            You can also render molecules using the HTML Canvas API and specify\\n            height and width.\\n          </p>\\n        </div>\\n      </section>\\n      <div className=\\\"columns is-desktop\\\">\\n        <div className=\\\"column\\\">\\n          <MoleculeStructure\\n            width={350}\\n            height={300}\\n            structure={caffeine}\\n            id=\\\"structure-example-canvas-caffeine\\\"\\n          />\\n        </div>\\n        <div className=\\\"column\\\">\\n          <MoleculeStructure\\n            width={350}\\n            height={300}\\n            structure={aspirin}\\n            id=\\\"structure-example-canvas-aspirin\\\"\\n          />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default ExampleCanvas;\\n\";","export default \"import MoleculeStructure from \\\"../components/MoleculeStructure/MoleculeStructure\\\";\\n\\nfunction ExampleSubstructure() {\\n  const caffeine = \\\"CN1C=NC2=C1C(=O)N(C(=O)N2C)\\\";\\n  const caffeineSubStruct = \\\"[N,n,O;!H0]\\\";\\n\\n  const aspirin = \\\"CC(=O)Oc1ccccc1C(=O)O\\\";\\n  const aspirinSubStruct = \\\"CC(=O)Oc1ccccc1C\\\";\\n\\n  return (\\n    <div id=\\\"component-example-canvas\\\" className=\\\"container\\\">\\n      <section className=\\\"hero\\\">\\n        <div className=\\\"hero-body\\\">\\n          <p className=\\\"title\\\">Substructure Highlight</p>\\n          <p className=\\\"subtitle\\\">\\n            You can also highlight substructure of molecules with both the SVG\\n            and Canvas APIs.\\n          </p>\\n        </div>\\n      </section>\\n      <div className=\\\"columns is-desktop\\\">\\n        <div className=\\\"column\\\">\\n          <MoleculeStructure\\n            width={350}\\n            height={300}\\n            svgMode\\n            structure={caffeine}\\n            subStructure={caffeineSubStruct}\\n            id=\\\"structure-example-substruct-svg-caffeine\\\"\\n          />\\n        </div>\\n        <div className=\\\"column\\\">\\n          <MoleculeStructure\\n            width={350}\\n            height={300}\\n            structure={aspirin}\\n            subStructure={aspirinSubStruct}\\n            id=\\\"structure-example-subsctruct-canvas-aspirin\\\"\\n          />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default ExampleSubstructure;\\n\";"],"sourceRoot":""}